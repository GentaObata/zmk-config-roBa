#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift-tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <20 19 19 20>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E    &kp R    &kp T                                                             &kp Y                &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D    &lt 1 F  &kp G                    &to_layer_0 ESCAPE          &kp MINUS    &kp H                &kp J  &kp K      &kp L    &kp SEMICOLON
&mt LEFT_SHIFT Z  &kp X         &kp C    &kp V    &lt 6 B                  &kp TAB                     &kp SQT      &kp N                &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_ALT  &kp TAB  &mo 2    &mt LEFT_WIN LANGUAGE_2  &lt_to_layer_0 3 SPACE      &lt 7 ENTER  &mt RIGHT_WIN LANG1                             &kp A
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1          &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4           &kp N5                                        &kp NUMBER_6   &kp N7          &kp N8           &kp N9                &kp N0
&kp EXCLAMATION       &kp AT_SIGN   &kp HASH      &kp DOLLAR             &kp PERCENT            &trans      &kp PLUS   &kp CARET      &kp AMPERSAND   &kp ASTERISK     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&mt LEFT_SHIFT GRAVE  &kp TILDE     &kp LC(A)     &kp LS(LA(LC(LG(V))))  &kp LS(LA(LC(LG(B))))  &trans      &kp EQUAL  &kp BACKSLASH  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET      &mt RIGHT_SHIFT RIGHT_BRACKET
&trans                &trans        &trans        &trans                 &trans                 &trans      &trans     &trans                                                                &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE  &trans              &kp UP_ARROW    &trans               &trans                      &trans  &trans              &kp LS(UP_ARROW)    &trans               &trans
&trans      &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &trans  &trans      &trans  &trans  &kp LS(LEFT_ARROW)  &kp LS(DOWN_ARROW)  &kp LS(RIGHT_ARROW)  &trans
&trans      &kp LC(LEFT_ARROW)  &trans          &kp LC(RIGHT_ARROW)  &trans  &trans      &trans  &trans  &trans              &trans              &trans               &trans
&trans      &trans              &trans          &trans               &trans  &trans      &trans  &trans                                                               &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans                 &trans  &trans  &trans  &kp RS(RA(RC(RG(P))))
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                 &trans  &trans  &trans  &kp RS(RA(RC(RG(SEMICOLON))))
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp RS(RA(RC(RG(N))))  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                         &trans
            >;
        };
    };
};
